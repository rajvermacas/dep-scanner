---
description: 
globs: 
alwaysApply: false
---
# Dependency Scanner Project Overview

## Project Purpose

The Dependency Scanner is a Python tool designed to analyze software projects and identify their dependencies. It scans project files, detects programming languages, package managers, and extracts dependencies from various file formats.

## Key Configuration Files

- [config.yaml](mdc:config.yaml): Contains configuration for allowed and restricted dependencies, ignore patterns, and dependency categories
- [pyproject.toml](mdc:pyproject.toml): Project configuration including dependencies, development tools, and build settings

## Core Components

The main project code is located in `src/dependency_scanner_tool/`:

- [scanner.py](mdc:src/dependency_scanner_tool/scanner.py): Core scanning functionality including dependency detection and classification
- [cli.py](mdc:src/dependency_scanner_tool/cli.py): Command-line interface implementation
- [file_type_detector.py](mdc:src/dependency_scanner_tool/file_type_detector.py): Identifies file types based on extensions and content patterns
- [categorization.py](mdc:src/dependency_scanner_tool/categorization.py): Categorizes dependencies into configurable groups
- [html_report.py](mdc:src/dependency_scanner_tool/html_report.py): Generates HTML reports from scan results

## Modular Components

The scanner has several modular components organized in subdirectories:

- `parsers/`: File format specific dependency parsers
- `analyzers/`: Language-specific import analyzers
- `normalizers/`: Package name normalization utilities
- `reporters/`: Output formatting and report generation
- `ci/`: Continuous integration utilities

## Testing

Tests are located in the `tests/` directory and follow a structure that mirrors the main source code.
