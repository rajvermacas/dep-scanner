---
description: 
globs: 
alwaysApply: false
---
# Dependency Scanner Workflow

## Main Execution Flow

The primary execution flow of the Dependency Scanner is:

1. **Initialization**: Create a `DependencyScanner` instance with appropriate components
2. **Project Scanning**: Call `scan_project()` with the target directory path
3. **Language Detection**: Identify programming languages in the project
4. **Package Manager Detection**: Identify package managers used
5. **Dependency File Discovery**: Find and parse dependency definition files
6. **Import Analysis**: Analyze source code imports (optional)
7. **Result Generation**: Assemble and return a `ScanResult` object

## Key Methods in Scanning Process

The [scanner.py](mdc:src/dependency_scanner_tool/scanner.py) file contains the core scanning logic:

- `DependencyScanner.scan_project()`: Main entry point for scanning
- `_find_dependency_files()`: Discovers dependency definition files
- `_find_source_files()`: Finds source code files for import analysis
- `_log_scan_summary()`: Generates summary of scan results

## CLI Workflow

The command-line interface in [cli.py](mdc:src/dependency_scanner_tool/cli.py) provides several commands:

1. `scan`: Scans a project directory and displays results
2. `report`: Generates HTML reports from scan results
3. `categorize`: Categorizes dependencies into defined groups

## Report Generation

Report generation workflow:

1. Complete a project scan to obtain a `ScanResult`
2. Use the HTML reporter to generate a report
3. Save or serve the HTML report

## Testing Workflow

The test suite follows a structured approach:

1. Unit tests for individual components
2. Integration tests for parsers and analyzers
3. End-to-end tests for the complete scanning process

## Development Workflow

When extending the scanner:

1. Add new parsers to `parsers/` directory
2. Add new analyzers to `analyzers/` directory
3. Register new components in the appropriate registries
4. Add tests for new functionality
5. Update documentation as needed
