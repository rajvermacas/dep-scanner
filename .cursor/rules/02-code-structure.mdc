---
description: 
globs: 
alwaysApply: false
---
# Dependency Scanner Codebase Structure

## Code Organization

The codebase follows a modular design with clear separation of concerns:

1. **Core Components**: Located directly in `src/dependency_scanner_tool/`
2. **Specialized Modules**: Organized into subdirectories by functionality
3. **Tests**: Located in `tests/` with a directory structure mirroring the source code

## Key Patterns

### Abstract Base Classes

Core functionality is defined using abstract base classes that establish interfaces:

- `LanguageDetector`: For detecting programming languages
- `PackageManagerDetector`: For identifying package managers
- `DependencyFileParser`: Base for dependency file parsing
- `ImportAnalyzer`: Base for analyzing source code imports

### Data Models

Key data structures include:

- `Dependency`: Represents a single project dependency
- `DependencyType`: Enum for dependency classification (allowed, restricted, unknown)
- `ScanResult`: Contains the complete results of a project scan

## Coding Standards

1. All files should follow PEP 8 style guidelines with a line length of 100 characters
2. Type hints must be used throughout the codebase
3. Docstrings are required for all classes and functions
4. Error handling uses custom exception classes from `exceptions.py`
5. File size should not exceed 500 lines (per coding guidelines)

## Important Design Principles

1. Extensibility: New parsers, analyzers, and detectors can be easily added
2. Robustness: Graceful error handling for various edge cases
3. Configurability: External configuration via YAML files
4. Test-driven development: Comprehensive test coverage expected

## Dependency Classification

Dependencies are classified into three categories:
- **Allowed**: Explicitly approved dependencies
- **Restricted**: Dependencies that should not be used
- **Unknown**: Dependencies not found in either list

Configuration for allowed and restricted dependencies is in [config.yaml](mdc:config.yaml).
