---
description: 
globs: 
alwaysApply: false
---
# Dependency Scanner Development Guidelines

## Code Quality Standards

1. **Maximum File Size**: Files should not exceed 500 lines; split larger files into logical components
2. **Test-Driven Development**: Always write tests before implementing new features
3. **Logging**: Implement robust logging with appropriate log levels; avoid logging raw data structures
4. **Exception Handling**: Use custom exception types from `exceptions.py` for specific error conditions
5. **Type Hints**: All functions and methods must include type hints
6. **Docstrings**: All public functions, methods, and classes must have docstrings

## Directory Organization

When adding new functionality, follow the established directory structure:

- **Core Components**: Direct in `src/dependency_scanner_tool/`
- **Parsers**: Language-specific parsers in `src/dependency_scanner_tool/parsers/`
- **Analyzers**: Language-specific analyzers in `src/dependency_scanner_tool/analyzers/`
- **Normalizers**: Package name normalizers in `src/dependency_scanner_tool/normalizers/`
- **Reporters**: Output formatters in `src/dependency_scanner_tool/reporters/`
- **Tests**: Mirror the source structure in `tests/`

## Testing Guidelines

1. **Unit Tests**: Required for all new functionality
2. **Integration Tests**: Required for components that interact with each other
3. **Mock External Dependencies**: Use mocks for file system, network, etc.
4. **Test Coverage**: Aim for at least 80% code coverage
5. **Test Edge Cases**: Include tests for error conditions and edge cases

## Dependency Management

1. **Virtual Environment**: Always use a virtual environment for development
2. **Dependencies**: Add new dependencies to `pyproject.toml` with version constraints
3. **Dev Dependencies**: Development-only dependencies go in the `dev` optional dependencies section
4. **Configuration**: Update `config.yaml` when adding new dependency categories

## Commit and PR Guidelines

1. **Small, Focused Changes**: Keep commits and PRs small and focused on a single concern
2. **Descriptive Commit Messages**: Write clear, descriptive commit messages
3. **Update Documentation**: Update relevant documentation with code changes
4. **Run Tests Locally**: Ensure all tests pass locally before submitting a PR

## Error Handling

1. Use custom exception classes from `exceptions.py`
2. Log exceptions with appropriate context
3. Provide meaningful error messages
4. Include recovery mechanisms where appropriate

## Configuration Management

1. Default configuration is in `config.yaml`
2. Support environment-specific overrides
3. Document all configuration options
